// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1alpha2/types/check-in.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	v1alpha2/types/check-in.proto
	v1alpha2/types/faq.proto

It has these top-level messages:
	CheckIn
	Faq
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// FAQ represents a frequently asked question of some kind
type CheckIn struct {
	// Should be a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier) of a user registered in Keybase
	// Example: e1da1be2-eff2-11e8-a204-0f0dc88152cb
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// Whether the user will be boarding the flight
	//
	// Can be one of
	// - true (yes)
	// - false (no)
	//
	// Should default at "no"
	Boarding bool `protobuf:"varint,2,opt,name=boarding" json:"boarding,omitempty"`
	// In flight meal preferences. Can be a string of arbitrary length
	//
	// Example:
	// - "Vegitarian"
	// - "Vegan"
	Meal string `protobuf:"bytes,3,opt,name=meal" json:"meal,omitempty"`
	// The song suggestion.
	//
	// Example
	// - Merry Christmas
	// - 10,000 Fists
	// - Come sail away
	Song string `protobuf:"bytes,4,opt,name=song" json:"song,omitempty"`
	// How many children there will be
	//
	// Example:
	// - 1
	// - 10
	Children int32 `protobuf:"varint,5,opt,name=children" json:"children,omitempty"`
	// Any additional things we should know
	//
	// Example:
	// - "I don't like fish"
	// - "Can additional people come?"
	Errata string `protobuf:"bytes,6,opt,name=errata" json:"errata,omitempty"`
}

func (m *CheckIn) Reset()                    { *m = CheckIn{} }
func (m *CheckIn) String() string            { return proto.CompactTextString(m) }
func (*CheckIn) ProtoMessage()               {}
func (*CheckIn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CheckIn) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CheckIn) GetBoarding() bool {
	if m != nil {
		return m.Boarding
	}
	return false
}

func (m *CheckIn) GetMeal() string {
	if m != nil {
		return m.Meal
	}
	return ""
}

func (m *CheckIn) GetSong() string {
	if m != nil {
		return m.Song
	}
	return ""
}

func (m *CheckIn) GetChildren() int32 {
	if m != nil {
		return m.Children
	}
	return 0
}

func (m *CheckIn) GetErrata() string {
	if m != nil {
		return m.Errata
	}
	return ""
}

func init() {
	proto.RegisterType((*CheckIn)(nil), "v1alpha2.types.CheckIn")
}

func init() { proto.RegisterFile("v1alpha2/types/check-in.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xbd, 0x4a, 0x04, 0x31,
	0x14, 0x85, 0x89, 0xee, 0xce, 0xae, 0x29, 0x2c, 0x52, 0x68, 0x10, 0x84, 0xc1, 0x6a, 0x9a, 0x9d,
	0xa0, 0x56, 0x62, 0xa7, 0xd5, 0xb6, 0x53, 0xda, 0xc8, 0x9d, 0xc9, 0x25, 0x09, 0x3b, 0xf9, 0x21,
	0xc9, 0xba, 0xf8, 0x2a, 0x3e, 0xad, 0x24, 0x83, 0x0b, 0x76, 0xe7, 0x3b, 0xe7, 0xfe, 0x70, 0xe8,
	0xfd, 0xd7, 0x23, 0xcc, 0x41, 0xc3, 0x93, 0xc8, 0xdf, 0x01, 0x93, 0x98, 0x34, 0x4e, 0x87, 0x9d,
	0x71, 0x7d, 0x88, 0x3e, 0x7b, 0x76, 0xfd, 0x17, 0xf7, 0x35, 0x7e, 0xf8, 0x21, 0x74, 0xf3, 0x5e,
	0x46, 0xf6, 0x8e, 0xdd, 0xd2, 0xcd, 0x31, 0x61, 0xfc, 0x34, 0x92, 0x93, 0x96, 0x74, 0x57, 0x43,
	0x53, 0x70, 0x2f, 0xd9, 0x1d, 0xdd, 0x8e, 0x1e, 0xa2, 0x34, 0x4e, 0xf1, 0x8b, 0x96, 0x74, 0xdb,
	0xe1, 0xcc, 0x8c, 0xd1, 0x95, 0x45, 0x98, 0xf9, 0x65, 0xdd, 0xa8, 0xba, 0x78, 0xc9, 0x3b, 0xc5,
	0x57, 0x8b, 0x57, 0x74, 0xb9, 0x31, 0x69, 0x33, 0xcb, 0x88, 0x8e, 0xaf, 0x5b, 0xd2, 0xad, 0x87,
	0x33, 0xb3, 0x1b, 0xda, 0x60, 0x8c, 0x90, 0x81, 0x37, 0xcb, 0xdf, 0x85, 0xde, 0x5e, 0x3f, 0x5e,
	0x94, 0xc9, 0xfa, 0x38, 0xf6, 0x93, 0xb7, 0x02, 0x9c, 0x8c, 0x78, 0xd2, 0xfe, 0x24, 0xd1, 0x15,
	0xb6, 0xd9, 0xee, 0x20, 0x98, 0x24, 0xc2, 0x41, 0x09, 0xe5, 0xc5, 0xff, 0xe2, 0x63, 0x53, 0x0b,
	0x3f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x4e, 0xd8, 0x9e, 0xd3, 0x11, 0x01, 0x00, 0x00,
}
